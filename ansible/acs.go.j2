package acs

import (
	"fmt"
	"log"
	"net/http"
	"net/url"
	"path"

{% for item in acs_paths %}
    {{ item | lower }} "github.com/bailey84j/acs-go/acs/base/{{ item | lower }}"
{% endfor %}
    client "github.com/bailey84j/acs-go/acs/client"
)

const (
	defaultBaseURL = "https://tower.fiscloudservices.com/"
	defaultAPIPath = ""
	userAgent      = "jarvis"
	logLevel       = "info"
)

type API struct {
	client               *client.Client
{% for item in acs_paths %}
    {{ item }}                *{{ item | lower }}.{{ item }}
{% endfor %}
}
// Authenticate is used to set and store Basic Auth for this client instance
func (a *API) Authenticate(username, password string) error {
	if len(username) > 0 && len(password) > 0 {
		a.client.Username = username
		a.client.Password = password
		return nil
	}
	return fmt.Errorf("no valid authentication credentials were provided")
}

func NewACSAPI(endpoint string) API {
	url, err := url.Parse(endpoint)
	if err != nil {
		log.Printf("error parsing provided url: %s, Using default: %s", err.Error(), defaultBaseURL)
		url, _ = url.Parse(defaultBaseURL)
	}
	url.Path = path.Join(url.Path, defaultAPIPath)

	// This is initialized this way because of composition
	client := &client.Client{
		&http.Client{},
		userAgent,
		"",
		"",
		url,
		3,
		"3s",
		logLevel,
	}

	return API{
		client: client,
{% for item in acs_paths %}
        {{ item }} : &{{ item | lower }}.{{ item }} {
			Client: client,
		},
{% endfor %}
	}
}