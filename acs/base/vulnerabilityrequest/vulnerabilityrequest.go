package vulnerabilityrequest

import (
    "fmt"
    tools "github.com/bailey84j/acs-go/acs/tools"
    client "github.com/bailey84j/acs-go/acs/client"
)

type VulnerabilityRequest struct {
	Client client.Client
}
        // debug: {"detail": [{"operationId": "VulnerabilityRequestService_ListVulnerabilityRequests", "parameters": [{"in": "query", "name": "query", "required": false, "schema": {"type": "string"}}, {"in": "query", "name": "pagination.limit", "required": false, "schema": {"format": "int32", "type": "integer"}}, {"in": "query", "name": "pagination.offset", "required": false, "schema": {"format": "int32", "type": "integer"}}, {"in": "query", "name": "pagination.sortOption.field", "required": false, "schema": {"type": "string"}}, {"in": "query", "name": "pagination.sortOption.reversed", "required": false, "schema": {"type": "boolean"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1ListVulnerabilityRequestsResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "ListVulnerabilityRequests returns the list of vulnerability requests.", "tags": ["VulnerabilityRequestService"]}, {"operationId": "VulnerabilityRequestService_GetVulnerabilityRequest", "parameters": [{"in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1GetVulnerabilityRequestResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "GetVulnerabilityRequest returns the requested vulnerability request by ID.", "tags": ["VulnerabilityRequestService"]}], "method": "get"}

        
// ListVulnerabilityRequests returns the list of vulnerability requests.

func (a VulnerabilityRequest) ListVulnerabilityRequests(args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")
    ok := tools.CheckFieldsValid("query-string,pagination_limit-integer,pagination_offset-integer,pagination_sortOption_field-string,pagination_sortOption_reversed-boolean",args)
    if !ok {
		fmt.Printf("Variable Vaidation Failed")
    }
uriPath := "/v1/cve/requests"

    tools.GetResource(&a.Client, uriPath, args)

}
// GetVulnerabilityRequest returns the requested vulnerability request by ID.

func (a VulnerabilityRequest) GetVulnerabilityRequest(id string,args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/" + id + ""

    tools.GetResource(&a.Client, uriPath, args)

}        // debug: {"detail": [{"operationId": "VulnerabilityRequestService_DeleteVulnerabilityRequest", "parameters": [{"in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1Empty"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "DeleteVulnerabilityRequest deletes a vulnerability request.", "tags": ["VulnerabilityRequestService"]}], "method": "delete"}

        
// DeleteVulnerabilityRequest deletes a vulnerability request.

func (a VulnerabilityRequest) DeleteVulnerabilityRequest(id string,args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/" + id + ""

    tools.DeleteResource(&a.Client, uriPath, args)

}            // debug: {"detail": [{"operationId": "VulnerabilityRequestService_DeferVulnerability", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1DeferVulnRequest"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1DeferVulnResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "DeferVulnerability starts the deferral process for the specified vulnerability.", "tags": ["VulnerabilityRequestService"]}, {"operationId": "VulnerabilityRequestService_FalsePositiveVulnerability", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1FalsePositiveVulnRequest"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1FalsePositiveVulnResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.", "tags": ["VulnerabilityRequestService"]}, {"operationId": "VulnerabilityRequestService_ApproveVulnerabilityRequest", "parameters": [{"in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1ApproveVulnRequest"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1ApproveVulnRequestResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "ApproveVulnRequest approve a vulnerability request. If it is an unwatch vulnerability request then the\nassociated vulnerabilities are not watched in workflows such as policy detection, risk, etc.", "tags": ["VulnerabilityRequestService"]}, {"operationId": "VulnerabilityRequestService_DenyVulnerabilityRequest", "parameters": [{"in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1DenyVulnRequest"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1DenyVulnRequestResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "DenyVulnRequest denies a vulnerability request.", "tags": ["VulnerabilityRequestService"]}, {"operationId": "VulnerabilityRequestService_UndoVulnerabilityRequest", "parameters": [{"in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1UndoVulnRequestResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "UndoVulnerabilityRequest undoes a vulnerability request.", "tags": ["VulnerabilityRequestService"]}, {"operationId": "VulnerabilityRequestService_UpdateVulnerabilityRequest", "parameters": [{"in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1UpdateVulnRequest"}}}, "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/v1UpdateVulnRequestResponse"}}}, "description": "A successful response."}, "default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/runtimeError"}}}, "description": "An unexpected error response."}}, "summary": "UpdateVulnerabilityRequest updates an existing vulnerability request. Currently only deferral expiration time can be updated.", "tags": ["VulnerabilityRequestService"]}], "method": "post"}

        
// DeferVulnerability starts the deferral process for the specified vulnerability.

func (a VulnerabilityRequest) DeferVulnerability(args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/defer"

    tools.PostResource(&a.Client, uriPath, args)

}
// FalsePositiveVulnerability starts the process to mark the specified vulnerability as false-positive.

func (a VulnerabilityRequest) FalsePositiveVulnerability(args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/false-positive"

    tools.PostResource(&a.Client, uriPath, args)

}
// ApproveVulnRequest approve a vulnerability request. If it is an unwatch vulnerability request then the associated vulnerabilities are not watched in workflows such as policy detection, risk, etc.

func (a VulnerabilityRequest) ApproveVulnerabilityRequest(id string,args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/" + id + "/approve"

    tools.PostResource(&a.Client, uriPath, args)

}
// DenyVulnRequest denies a vulnerability request.

func (a VulnerabilityRequest) DenyVulnerabilityRequest(id string,args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/" + id + "/deny"

    tools.PostResource(&a.Client, uriPath, args)

}
// UndoVulnerabilityRequest undoes a vulnerability request.

func (a VulnerabilityRequest) UndoVulnerabilityRequest(id string,args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/" + id + "/undo"

    tools.PostResource(&a.Client, uriPath, args)

}
// UpdateVulnerabilityRequest updates an existing vulnerability request. Currently only deferral expiration time can be updated.

func (a VulnerabilityRequest) UpdateVulnerabilityRequest(id string,args map[string]interface{}) {

fmt.Printf("Running  Vaidation Failed")

uriPath := "/v1/cve/requests/" + id + "/update"

    tools.PostResource(&a.Client, uriPath, args)

}    