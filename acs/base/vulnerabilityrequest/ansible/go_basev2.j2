package {{ item | lower}}

import (
    "fmt"

    client "github.com/bailey84j/acs-go/acs/client"
    tools "github.com/bailey84j/acs-go/acs/tools"
)

type {{ item }} struct {
	Client client.Client
}
{% set jsonquery = '[?name==`' + item + '`].func[]' %}
{% for func in acs_methods_raw | json_query(jsonquery)  %}
{%- if func.summary is defined -%}
// {{ func.summary }}
{% endif %}
func (a {{ item }}) {{ func.operationId.split('_')[1]}}(
    {%- if 'name' in func | json_query('parameters[?required][]') | string -%}
    {%- for reqparam in func | json_query('parameters[?required][]') -%}
    {{ reqparam.name | replace('.','_') }} {{ reqparam.schema.type }},{%- endfor -%}
    {%- endif -%}args map[string]interface{}) {

//  
// NOT Required {{ func | json_query('parameters[?!required][]') }}

{% if 'name' in func | json_query('parameters[?!required][]') | string %}
    ok := tools.CheckFieldsValid("
{%- for notreqparam in func | json_query('parameters[?!required][]') -%}
{{ notreqparam.name | replace('.','_') }}_{{ notreqparam.schema.type }}{{ "," if not loop.last }}{%- endfor -%}",args)
    if !ok {
		fmt.Printf("Variable Vaidation Failed")
    }
    {%- endif %}



    // {{ func.operationId.split('_')[1].split(item)[0]}}Resource()





}
{% endfor %}
